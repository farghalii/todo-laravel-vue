# To-Do App
- Note
    - If guest do not register:
        -> He'll deal only with UI without storing its data in DB
        -> but store it in local storage or vuex
- API
    - Database Structure
        - Tables
            - tasks
                - id, name, {description}, {duration}, {task_day}, {start_at}, {end_at}, {user_id}
                - Task Factory
                - Task Seeder
            - users
    - Endpoints
        - Tasks
            - [GET]         api/tasks/
            - [POST]        api/tasks/
            - [GET]         api/tasks/{task}
            - [PUT/PATCH]   api/tasks/{task}
            - [DELETE]      api/tasks/{task}
        - Authentication
            - [POST]        api/auth/register
            - [POST]        api/auth/login
            - [POST]        api/auth/logout
            - [POST]        api/auth/refresh
            - [GET]         api/auth/profile
    - Testing
        - Features
            - Read Tasks                                                    [Done]
                - Authenticated user access his tasks
                - Unauthenticated user cannot access the index page.
            - Read Single Task                                              [Done]
                - Authenticated user access task of his tasks
                - Unauthenticated user cannot access single task.
            - Create | Update | Delete Task                                 [Done]
                - Authenticated user can (create|update|delete) task
                - Unauthenticated user cannot (create|update|delete) task
            - Register | Login | Logout | Refresh | Profile                 [Done]
                - Guest may register
                - User may login
                - User may logout
                - User may refresh JWT token
                - User may see profile
        - Units
    - API Resources                                                         [Done]
- Vue UI
    - It'll be SPA

------------------------------------------------------------------------------------------------

- Success [Data Structure]
    - {
        "success": true,
        "code": xxxx,
        "message": "......",
        "data": {}
    }
- Error [Data Structure]
    - {
        "success": false,
        "code": xxxx,
        "message": "......",
        "data": null
    }

- Response Codes
    |----------------|-----------|---------|----------------------------------------------------------------|
    | Operation      |  Success  |  Error  |                              Message                           |
    |----------------|-----------|---------|------------- Success -----------|----------- Error ------------|
    | Get Data       |  s2000    |  e4000  |    Data gotten successfully     |   Get data failed            |
    | Post Data      |  s2001    |  e4001  |    Data inserted successfully   |   Insert data failed         |
    | Update Data    |  s2002    |  e4002  |    Data updated successfully    |   Update data failed         |
    | Delete Data    |  s2003    |  e4003  |    Data deleted successfully    |   Delete data failed         |
    | Authentication |  s2004    |  e4004  |    Authenticated User           |   Unauthenticated User       |
    | Authorization  |  s2005    |  e4005  |                                 |   Unauthorized User          |
    |----------------|-----------|---------|---------------------------------|------------------------------|


- Packages
    - For AuthN & AuthZ used { jwt-auth } package to provide JWT Auth(N/Z)
        - Read Doc.
        - Create Routes [api/auth/](login|logout|register|refresh|profile)
        - Define Authentication Logic
            - Create JWTAuthController
